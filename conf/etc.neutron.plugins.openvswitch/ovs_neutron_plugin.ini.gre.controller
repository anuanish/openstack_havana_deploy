[database]
# this line must be changed to actually run the plugin.
# example:
# sql_connection = mysql://root:nova@127.0.0.1:3306/ovs_neutron
# replace 127.0.0.1 above with the ip address of the database used by the
# main neutron server. (leave it as is if the database runs on this host.)
#sql_connection = sqlite:////var/lib/neutron/ovs.sqlite
sql_connection = mysql://neutronuser:neutronpass@<db_ip>/neutron
# database reconnection retry times - in event connectivity is lost
# set to -1 implies an infinite retry count
# sql_max_retries = 10
# database reconnection interval in seconds - if the initial connection to the
# database fails
reconnect_interval = 2
# enable the use of eventlet's db_pool for mysql. the flags sql_min_pool_size,
# sql_max_pool_size and sql_idle_timeout are relevant only if this is enabled.
# sql_dbpool_enable = false
# minimum number of sql connections to keep open in a pool
# sql_min_pool_size = 1
# maximum number of sql connections to keep open in a pool
# sql_max_pool_size = 5
# timeout in seconds before idle sql connections are reaped
# sql_idle_timeout = 3600

[ovs]
tenant_network_type = gre
tunnel_id_ranges = 1:1000
#integration_bridge = br-int
#tunnel_bridge = br-tun
#local_ip = <neutron_ip>
enable_tunneling = true
# (stropt) type of network to allocate for tenant networks. the
# default value 'local' is useful only for single-box testing and
# provides no connectivity between hosts. you must either change this
# to 'vlan' and configure network_vlan_ranges below or change this to
# 'gre' and configure tunnel_id_ranges below in order for tenant
# networks to provide connectivity between hosts. set to 'none' to
# disable creation of tenant networks.
#
# default: tenant_network_type = local
# example: tenant_network_type = gre

# (listopt) comma-separated list of
# <physical_network>[:<vlan_min>:<vlan_max>] tuples enumerating ranges
# of vlan ids on named physical networks that are available for
# allocation. all physical networks listed are available for flat and
# vlan provider network creation. specified ranges of vlan ids are
# available for tenant network allocation if tenant_network_type is
# 'vlan'. if empty, only gre and local networks may be created.
#
# default: network_vlan_ranges =
# example: network_vlan_ranges = physnet1:1000:2999

# (boolopt) set to true in the server and the agents to enable support
# for gre networks. requires kernel support for ovs patch ports and
# gre tunneling.
#
# default: enable_tunneling = false

# (listopt) comma-separated list of <tun_min>:<tun_max> tuples
# enumerating ranges of gre tunnel ids that are available for tenant
# network allocation if tenant_network_type is 'gre'.
#
# default: tunnel_id_ranges =
# example: tunnel_id_ranges = 1:1000

# do not change this parameter unless you have a good reason to.
# this is the name of the ovs integration bridge. there is one per hypervisor.
# the integration bridge acts as a virtual "patch bay". all vm vifs are
# attached to this bridge and then "patched" according to their network
# connectivity.
#
# default: integration_bridge = br-int

# only used for the agent if tunnel_id_ranges (above) is not empty for
# the server.  in most cases, the default value should be fine.
#
# default: tunnel_bridge = br-tun

# peer patch port in integration bridge for tunnel bridge
# int_peer_patch_port = patch-tun

# peer patch port in tunnel bridge for integration bridge
# tun_peer_patch_port = patch-int

# uncomment this line for the agent if tunnel_id_ranges (above) is not
# empty for the server. set local-ip to be the local ip address of
# this hypervisor.
#
# default: local_ip =

# (listopt) comma-separated list of <physical_network>:<bridge> tuples
# mapping physical network names to the agent's node-specific ovs
# bridge names to be used for flat and vlan networks. the length of
# bridge names should be no more than 11. each bridge must
# exist, and should have a physical network interface configured as a
# port. all physical networks listed in network_vlan_ranges on the
# server should have mappings to appropriate bridges on each agent.
#
# default: bridge_mappings =
# example: bridge_mappings = physnet1:br-eth1

[agent]
# agent's polling interval in seconds
polling_interval = 2

[securitygroup]
# firewall driver for realizing neutron security group function
# firewall_driver = neutron.agent.linux.iptables_firewall.ovshybridiptablesfirewalldriver

#-----------------------------------------------------------------------------
# sample configurations.
#-----------------------------------------------------------------------------
#
# 1. with vlans on eth1.
# [database]
# sql_connection = mysql://root:nova@127.0.0.1:3306/ovs_neutron
# [ovs]
# network_vlan_ranges = default:2000:3999
# tunnel_id_ranges =
# integration_bridge = br-int
# bridge_mappings = default:br-eth1
# [agent]
# add the following setting, if you want to log to a file
#
# 2. with tunneling.
# [database]
# sql_connection = mysql://root:nova@127.0.0.1:3306/ovs_neutron
# [ovs]
# network_vlan_ranges =
# tunnel_id_ranges = 1:1000
# integration_bridge = br-int
# tunnel_bridge = br-tun
# local_ip = 10.0.0.3
